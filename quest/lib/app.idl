type SubmissionStatus = enum {
  Submitted,
  Approved,
  Rejected,
  NoDecision,
};

type UserInput = struct {
  login_method: LoginMethod,
  deadline: u32,
  title: str,
  description: str,
  submission_requirements: str,
  submission_type: SubmissionType,
  reward_amount: u128,
};

type LoginMethod = enum {
  Web3,
  Email,
  Username,
};

type SubmissionType = enum {
  Text,
  Link,
};

type InformationQuest = struct {
  login_method: LoginMethod,
  publisher_id: actor_id,
  deadline: u32,
  title: str,
  description: str,
  submission_requirements: str,
  submission_type: SubmissionType,
  reward_amount: u128,
  submissions: Submissions,
  quest_status: QuestStatus,
};

type Submissions = struct {
  map: map (actor_id, str),
  status: map (actor_id, SubmissionStatus),
};

type QuestStatus = enum {
  Open,
  Completed,
  Closed,
};

constructor {
  New : ();
};

service InfoQuestSvc {
  Close : (title: str) -> null;
  Decide : (participant: actor_id, decision: SubmissionStatus, title: str) -> null;
  Publish : (quest_details: UserInput) -> null;
  Submit : (submission: str, title: str) -> null;
  query GetAllQuests : () -> opt map (str, InformationQuest);
  query GetQuest : (title: str) -> opt InformationQuest;

  events {
    Published;
    Submitted;
    DecisionMade;
    Closed;
    SubmissionNotFound;
    QuestIsClosed;
    QuestDoesNotExist;
    AlreadyDecided;
    QuestCompleted;
    SubmissionRejected;
    AlreadySubmitted;
    PermissionDenied;
    RequireCommitment: struct { u128, u128 };
    DeadlinePassed;
    TitleAlreadyExists;
    IllegalTitle: str;
    IllegalDescription: str;
    IllegalRequirements: str;
  }
};

